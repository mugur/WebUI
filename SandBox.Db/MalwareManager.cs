using System;
using System.Collections.Generic;
using System.Linq;

namespace SandBox.Db
{
    public class MalwareManager : DbManager
    {
        #region FILTER

        public static String[] GetListDescriptions()
        {
            using (SandBoxDataContext db = new SandBoxDataContext())
            {
                var description = from mc in db.MalwareClasses
                                  orderby mc.Class
                                  select mc.Description;
                return description.ToArray();
            }
        }

        public static String[] GetListNames()
        {
            using (SandBoxDataContext db = new SandBoxDataContext())
            {
                var items = from m in db.Malwares
                            orderby m.Name
                            select m.Name;
                return items.ToArray();
            }
        }

        public static String[] GetListPathes()
        {
            using (SandBoxDataContext db = new SandBoxDataContext())
            {
                var items = from m in db.Malwares
                            orderby m.Path
                            select m.Path;
                return items.ToArray();
            }
        }

        public static String[] GetListDates()
        {
            using (SandBoxDataContext db = new SandBoxDataContext())
            {
                var items = from m in db.Malwares
                            orderby m.CreatedDate
                            select m.CreatedDate;

                List<String> its = items.Select(dateTime => Convert.ToString(dateTime)).ToList();
                return its.ToArray();
            }
        }

        #endregion
        
        public static IQueryable GetItems()
        {
            var db = new SandBoxDataContext();

            var items = from i in db.Malwares
                        join mc in db.MalwareClasses
                        on i.Class equals mc.Class
                        select new { i.Id, i.Name, i.CreatedDate, i.Path, i.ResearchCount, i.Class, mc.Description };
            return items;
        }

        public static String GetDescription(Int32 malwareClass)
        {
            using (SandBoxDataContext db = new SandBoxDataContext())
            {
                return db.MalwareClasses.FirstOrDefault(x => x.Class == malwareClass).Description;
            }
        }



        

        public static String GetPathById(Int32 id)
        {
            using (SandBoxDataContext db = new SandBoxDataContext())
            {
                return db.Malwares.FirstOrDefault(x => x.Id == id).Path;
            }
        }
    }//end class
}//end namespace
