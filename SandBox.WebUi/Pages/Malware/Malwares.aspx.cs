using System;
using System.Diagnostics;
using System.Linq;
using System.Net;
using DevExpress.Web.ASPxGridView;
using DevExpress.Web.ASPxUploadControl;
using SandBox.Connection;
using SandBox.Db;
using SandBox.Log;

namespace SandBox.WebUi.Pages.Malware
{
    public partial class Malwares : System.Web.UI.Page
    {
        private static ConnectionClientEx _client;
        private static ConnectionSetting _settings;
        private static Int32 _userId;

        protected void Page_Load(object sender, EventArgs e)
        {
            Title = "*** | Управление ВПО";
            _client = ConnectionClientEx.Instance;
            _settings = ConnectionManager.LoadSettings();

            if (!User.IsInRole("Administrator"))
            {
                if (!User.IsInRole("FileManager"))
                {
                    Response.Redirect("~/Account/Login.aspx");
                }
            }
            if (Master != null) ((MainMaster)Master).SetMenuFile("~/App_Data/SideMenu/Malware/MalwareMenu.xml");

            _userId = (Int32)UserManager.GetUser(User.Identity.Name).ProviderUserKey;

            gridViewMalware.Settings.ShowHeaderFilterButton = true;
            gridViewMalware.KeyFieldName = "Id";

            foreach (var column in
                gridViewMalware.Columns.Cast<object>().Where(column => column.GetType() == typeof(GridViewDataColumn)))
            {
                ((GridViewDataColumn)column).Settings.HeaderFilterMode = HeaderFilterMode.List;
            }

            if (!IsPostBack)
            {
                UpdateTableView();
                DbManager.OnTableUpdated += OnTableUpdated;
            }
        }

        private void OnTableUpdated(Table table)
        {
            if (table == Table.MLWRS)
            {
                UpdateTableView();
            }
        }

        private void UpdateTableView()
        {
            gridViewMalware.DataSource = MlwrManager.GetMlwrsTableView();
            gridViewMalware.DataBind();
        }

        protected void UpdateTimerTick(object sender, EventArgs e)
        {
            UpdateTableView();
        }

        protected void GridViewMalwareHeaderFilterFillItems(object sender, ASPxGridViewHeaderFilterEventArgs e)
        {
            e.Values.Clear();

            if (e.Column.FieldName == "Class")
            {
                foreach (var cls in MlwrManager.GetMlwrClassList())
                {
                    e.AddValue(cls, cls);
                }
            }

            if (e.Column.FieldName == "Name")
            {
                foreach (var cls in MlwrManager.GetMlwrNameList())
                {
                    e.AddValue(cls, cls);
                }
            }

            if (e.Column.FieldName == "Path")
            {
                foreach (var cls in MlwrManager.GetMlwrPathList())
                {
                    e.AddValue(cls, cls);
                }
            }

            if (e.Column.FieldName == "Loaded")
            {
                foreach (var cls in MlwrManager.GetMlwrLoadedList())
                {
                    e.AddValue(cls, cls);
                }
            }
        }

        protected void CallbackPanelUploadCallback(object source, DevExpress.Web.ASPxClasses.CallbackEventArgsBase e)
        {
            
        }

        protected void CallbackPanelDeleteCallback(object source, DevExpress.Web.ASPxClasses.CallbackEventArgsBase e)
        {
            Int32 mlwrId = Convert.ToInt32(e.Parameter);
            Session["mlwrId"] = mlwrId;
            if (mlwrId == 0) return;
            deleteText.Text = "Вы точно хотите удалить ВПО " + MlwrManager.GetMlwr(mlwrId).Path + "?";
        }

        protected void FileUploadComplete(object sender, FileUploadCompleteEventArgs e)
        {
            if (e.UploadedFile.FileName != String.Empty)
            {
                e.CallbackData = e.UploadedFile.FileName;

                try
                {
                    String ftpAddres = "ftp://" + _settings.RemoteHost + "/" + e.UploadedFile.FileName;

                    MLogger.LogTo(Level.TRACE, false, "Loading file " + e.UploadedFile.FileName + " to " + ftpAddres);
                    
                    using (var webClient = new WebClient())
                    {
                        webClient.UploadData(new Uri(ftpAddres), e.UploadedFile.FileBytes);
                    }

                    MlwrManager.AddMlwr("default", e.UploadedFile.FileName, _userId);
                    UpdateTableView();
                }
                catch (Exception ex)
                {
                    MLogger.LogTo(Level.ERROR, false, "Exception during loading: " + ex.Message);
                    
                    //test!!!
                    //MlwrManager.AddMlwr("default", e.UploadedFile.FileName, _userId);
                    //UpdateTableView();
                }
            }
        }

        protected void BtnUploadClick(object sender, EventArgs e)
        {
            Debug.Print("Upl");
        }

        protected void BtnDeleteClick(object sender, EventArgs e)
        {
            deleteText.Text = String.Empty;
            Int32 mlwrId = Convert.ToInt32(Session["mlwrId"]);
            if (mlwrId == 0) return;
            MlwrManager.DeleteMlwr(mlwrId);
        }

        protected void ASPxButton1_Click(object sender, EventArgs e)
        {
            Session["mlwrID"]= this.gridViewMalware.GetRowValues(this.gridViewMalware.FocusedRowIndex, "Id");
            Response.Redirect("~/Pages/Malware/MalwareCard.aspx");
        }
    }//end class
}//end namespace